USE master

SET LANGUAGE us_english;
PRINT('SYS-LANGUAGE NOW: '+@@language)
GO
SET DATEFORMAT dmy;
DECLARE @Current_DateFormat VARCHAR(30)
SELECT @Current_DateFormat = (select s.date_format from sys.dm_exec_sessions s where s.session_id = @@SPID );
PRINT('SYS-DATEFORMAT NOW: '+@Current_DateFormat)
GO

--CREATE SQL-SERVER LOGIN
if EXISTS
    (select * from sys.sql_logins where name = 'SQL_LOGIN')
begin
	DROP LOGIN SQL_LOGIN
END
GO
if not EXISTS
    (select * from sys.sql_logins where name = 'SQL_LOGIN')
begin
    create login SQL_LOGIN with PASSWORD = 'SQL_MasterPW'
END
GO

IF EXISTS (select * from sys.server_triggers where name = 'safety_trigger_db')
BEGIN
	DISABLE TRIGGER safety_trigger_db ON ALL SERVER
	PRINT('SAFETY TRIGGER #DATABASE DISABLED')
END
GO

USE VersicherungsDB
GO
IF EXISTS (select * from sys.triggers where name = 'safety_trigger_table')
BEGIN
	DISABLE TRIGGER safety_trigger_table ON DATABASE
	PRINT('SAFETY TRIGGER #TABLE DISABLED')
END
GO
USE master
GO


IF EXISTS(select * from sys.databases where name='VersicherungsDB')
	DROP DATABASE VersicherungsDB
	PRINT('OLD "VersicherungsDB" DATABASE DELETED')

CREATE DATABASE VersicherungsDB
GO
USE VersicherungsDB
GO
PRINT('DATABASE "VersicherungsDB" CREATED')

-- Create SQL-SERVER USER
drop user if exists DB_User
CREATE USER DB_User FOR LOGIN SQL_LOGIN
GO

--exec sp_change_users_login 'Auto_Fix', 'DB_User'
--go

-- default access for the user
grant 
connect, insert, update, delete, select, alter, execute
to DB_User
Go
PRINT('DB-User Created')

DROP TABLE IF EXISTS dbo.USERS
DROP TABLE IF EXISTS dbo.ANBIETER
DROP TABLE IF EXISTS dbo.PRODUKT_KATEGORIE
DROP TABLE IF EXISTS dbo.BERATER
DROP TABLE IF EXISTS dbo.BERATER_FRAGEN
DROP TABLE IF EXISTS dbo.BEWERTUNG_ANBIETER
DROP TABLE IF EXISTS dbo.BEWERTUNG_ANBIETER_PROD
DROP TABLE IF EXISTS dbo.BEWERTUNG_BERATER
DROP TABLE IF EXISTS dbo.PRODUKTE_ANBIETER
DROP TABLE IF EXISTS dbo.BESTELLUNGEN
DROP TABLE IF EXISTS dbo.PRODUKTE
DROP TABLE IF EXISTS dbo.FRAGEN
GO
PRINT('IF EXISTED: OLD TABLES DELETED')

CREATE TABLE [USERS]
(
   [ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
   [PASSWORDHASH] BINARY(64) NOT NULL, --PASSWORDHASH = SHA2_512
   [NAME] VARCHAR(30) NOT NULL UNIQUE,
   [GEBURTSTAG] DATE  NOT NULL,
   [WOHNORT] varchar(50) NOT NULL,
   [IS_ADMIN] BIT NOT NULL DEFAULT 0,
   [IS_BERATER] BIT NOT NULL DEFAULT 0
)
GO
CREATE TABLE [ANBIETER]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[NAME] VARCHAR(30) NOT NULL UNIQUE,
	[ADRESSE] VARCHAR(50) NOT NULL
)
GO
CREATE TABLE [PRODUKT_KATEGORIE]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[NAME] VARCHAR (50) NOT NULL
)
GO
CREATE TABLE [PRODUKTE]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[FK_ID_PRODUKT_KATEGORIE] INT NOT NULL,
	[NAME] VARCHAR(50) NOT NULL,
	[BESCHREIBUNG] VARCHAR(200) NOT NULL,
	CONSTRAINT FK_PRODUKTE_ID_PRODUKT_KATEGORIE FOREIGN KEY (FK_ID_PRODUKT_KATEGORIE)
		REFERENCES dbo.PRODUKT_KATEGORIE (ID)
)
GO
CREATE TABLE [BERATER]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[FK_ID_ANB] INT NOT NULL,
	[FK_ID_USERS] INT NOT NULL
	CONSTRAINT FK_BERATER_ID_ANBIETER FOREIGN KEY (FK_ID_ANB)     
		REFERENCES dbo.ANBIETER (ID)
			ON UPDATE CASCADE,
	CONSTRAINT FK_BERATER_ID_USERS FOREIGN KEY (FK_ID_USERS)
		REFERENCES dbo.USERS (ID)
			ON DELETE CASCADE
			ON UPDATE CASCADE
)
GO
CREATE TABLE [BEWERTUNG_ANBIETER]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[FK_ID_USERS] INT NOT NULL,
	[FK_ID_ANBIETER] INT NOT NULL,
	[STERNE] numeric(1,0) NOT NULL,
	CONSTRAINT FK_BEWERTUNG_ANBIETER_ID_USERS FOREIGN KEY (FK_ID_USERS)     
		REFERENCES dbo.USERS (ID)
			ON UPDATE CASCADE,
	CONSTRAINT FK_BEWERTUNG_ANBIETER_ID_ANBIETER FOREIGN KEY (FK_ID_ANBIETER)     
		REFERENCES dbo.ANBIETER (ID)
			ON DELETE CASCADE 
			ON UPDATE CASCADE
)
GO
CREATE TABLE [PRODUKTE_ANBIETER]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[FK_ID_ANBIETER] INT NOT NULL,
	[FK_ID_PRODUKTE] INT NOT NULL,
	[PREIS] DECIMAL(10,2) NOT NULL,
	[LAUFZEIT] NUMERIC(3,0) NOT NULL
	CONSTRAINT FK_PRODUKTE_ANBIETER_ID_ANBIETER FOREIGN KEY (FK_ID_ANBIETER)     
		REFERENCES dbo.ANBIETER (ID)     
			ON DELETE CASCADE 
			ON UPDATE CASCADE,
	CONSTRAINT FK_PRODUKTE_ANBIETER_ID_PRODUKTE FOREIGN KEY (FK_ID_PRODUKTE)     
		REFERENCES dbo.PRODUKTE (ID)
			ON UPDATE CASCADE
)
GO
CREATE TABLE [BEWERTUNG_ANBIETER_PROD]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[FK_ID_USERS] INT NOT NULL,
	[FK_ID_PRODUKTE_ANBIETER] INT NOT NULL,
	[STERNE] numeric(1,0) NOT NULL,
	CONSTRAINT FK_BEWERTUNG_ANBIETER_PROD_ID_USERS FOREIGN KEY (FK_ID_USERS)     
		REFERENCES dbo.USERS (ID)
			ON UPDATE CASCADE,
	CONSTRAINT FK_BEWERTUNG_ANBIETER_PROD_ID_PRODUKTE_ANBIETER FOREIGN KEY (FK_ID_PRODUKTE_ANBIETER)     
		REFERENCES dbo.PRODUKTE_ANBIETER (ID)
			ON DELETE CASCADE 
			ON UPDATE CASCADE    
)
GO
CREATE TABLE [BEWERTUNG_BERATER]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[FK_ID_USERS] INT NOT NULL,
	[FK_ID_BERATER] INT NOT NULL,
	[STERNE] NUMERIC(1,0) NOT NULL
	CONSTRAINT FK_BEWERTUNG_BERATER_ID_USERS FOREIGN KEY (FK_ID_USERS)     
		REFERENCES dbo.USERS (ID)
			ON UPDATE CASCADE,
	CONSTRAINT FK_BEWERTUNG_BERATER_ID_BERATER FOREIGN KEY (FK_ID_BERATER)     
		REFERENCES dbo.BERATER (ID)  
)
GO
CREATE TABLE [BESTELLUNGEN]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[FK_ID_USERS] INT NOT NULL,
	[FK_ID_PRODUKTE_ANBIETER] INT nOT NULL,
	[TIMESTAMP] DATETIME2(3) NOT NULL DEFAULT SYSDATETIME(),
	CONSTRAINT FK_BESTELLUNGEN_ID_USERS FOREIGN KEY (FK_ID_USERS)     
		REFERENCES dbo.USERS (ID)
			ON UPDATE CASCADE,
	CONSTRAINT FK_BESTELLUNGEN_ID_PRODUKTE_ANBIETER FOREIGN KEY (FK_ID_PRODUKTE_ANBIETER)     
		REFERENCES dbo.PRODUKTE_ANBIETER (ID)
			ON UPDATE CASCADE
)
GO
CREATE TABLE [FRAGEN]
(
	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
	[FK_ID_USERS] INT NOT NULL,
	[FK_ID_BERATER] INT NULL,
	[FRAGE] VARCHAR(300) NOT NULL,
	[ANTWORT] VARCHAR(300) NULL,
	[STMP_FRAGE] DATETIME2(3) NOT NULL DEFAULT SYSDATETIME(),
	[STMP_ANTWORT] DATETIME2(3) NULL,
	CONSTRAINT FK_FRAGEN_ID_USERS FOREIGN KEY (FK_ID_USERS)     
		REFERENCES dbo.USERS (ID)
			ON DELETE CASCADE 
			ON UPDATE CASCADE
)
GO
--CREATE TABLE [BERATER_FRAGEN] --ZWISCHENTABELLE DA BERATER ZU FRAGEN N ZU M BEZIEHUNG!
--(
--	[ID] INT NOT NULL IDENTITY(1,1) PRIMARY KEY,
--	[FK_ID_BERATER] INT NULL,
--	[FK_ID_FRAGE] INT NULL,
--	CONSTRAINT FK_FRAGEN_ID_BERATER FOREIGN KEY (FK_ID_BERATER)     
--		REFERENCES dbo.BERATER (ID)
--			ON UPDATE CASCADE,
--	CONSTRAINT FK_BERATER_FRAGEN_ID_FRAGEN FOREIGN KEY (FK_ID_FRAGE)
--		REFERENCES dbo.FRAGEN (ID)
--)
--GO

PRINT('TABLES CREATED')
GO


USE master
Go
IF EXISTS (select * from sys.server_triggers where name = 'safety_trigger_db')
BEGIN
	ENABLE TRIGGER safety_trigger_db ON ALL SERVER
	PRINT('SAFETY TRIGGER #DATABASE ENABLED')
END
GO
USE VersicherungsDB
GO
IF EXISTS (select * from sys.triggers where name = 'safety_trigger_table')
BEGIN
	ENABLE TRIGGER safety_trigger_table ON DATABASE
	PRINT('SAFETY TRIGGER #TABLE ENABLED')
END
GO

USE VersicherungsDB
GO

DECLARE @Fr VARCHAR(300)
DECLARE @Antw VARCHAR(300)
DECLARE @getANSWEREDQUESTIONS CURSOR

SET @getANSWEREDQUESTIONS = CURSOR FOR SELECT FRAGE, ANTWORT FROM FRAGEN


SELECT FRAGEN.FRAGE, FRAGEN.ANTWORT
FROM FRAGEN
WHERE FRAGEN.ANTWORT IS NOT NULL;

OPEN @getANSWEREDQUESTIONS
FETCH NEXT
FROM @getANSWEREDQUESTIONS INTO @Fr, @Antw
WHILE @@FETCH_STATUS = 0

BEGIN
PRINT @Fr
PRINT @Antw
FETCH NEXT
FROM @getANSWEREDQUESTIONS INTO @Fr, @Antw
END

CLOSE @getANSWEREDQUESTIONS
DEALLOCATE @getANSWEREDQUESTIONS

USE VersicherungsDB

DROP PROCEDURE IF EXISTS create_frage_user
GO
DROP FUNCTION IF EXISTS get_open_questions_by_berater_id	--VIEW nicht m�glich, da Parameter�bergabe notwendig
GO
DROP PROCEDURE IF EXISTS update_question_with_answer
GO
DROP TRIGGER IF EXISTS new_question_added
GO

CREATE PROCEDURE create_frage_user @fk_id_users INT, @frage VARCHAR(300)
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	BEGIN TRY
		IF (SELECT COUNT(*) FROM USERS WHERE USERS.ID = @fk_id_users) != 1
			THROW 60000, 'user id invalid', 1
		IF LEN(@frage) > 300
			THROW 60000, 'frage zu lange (max 300)' , 1
		INSERT INTO FRAGEN (FK_ID_USERS,FRAGE) VALUES (@fk_id_users,@frage)
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION
	END CATCH
GO

CREATE TRIGGER new_question_added ON FRAGEN --Zuweisung des Beraters zu einer neuen Frage per Trigger (Berater, mit den wenigsten Fragen)
AFTER INSERT
AS
	DECLARE @Ber INT
	DECLARE @frage_ID INT
	IF (SELECT COUNT(*) FROM FRAGEN) = 1	--Erste Frage
	BEGIN 
		SET @Ber =
			(SELECT TOP 1 BERATER.ID FROM BERATER)
		SET @frage_ID = 
			(SELECT COUNT(*) FROM FRAGEN)
		UPDATE FRAGEN SET FRAGEN.FK_ID_BERATER = @Ber WHERE FRAGEN.ID = @frage_ID
	END
	ELSE
	BEGIN
		SET @Ber =
			(SELECT TOP 1 BERATER.ID FROM BERATER LEFT JOIN 
				(SELECT BERATER.ID as BID, COUNT(FRAGEN.FK_ID_BERATER) as CNT FROM BERATER LEFT JOIN FRAGEN
					ON BERATER.ID = FRAGEN.FK_ID_BERATER
					GROUP BY BERATER.ID) INNERTABLE
				ON BERATER.ID = INNERTABLE.BID
				ORDER BY CNT ASC)
		SET @frage_ID = 
			(SELECT COUNT(*) FROM FRAGEN)

			UPDATE FRAGEN SET FRAGEN.FK_ID_BERATER = @Ber WHERE FRAGEN.ID = @frage_ID
	END
GO


CREATE FUNCTION get_open_questions_by_berater_id (@beraterID INT)
RETURNS TABLE
AS
RETURN
(
	SELECT FRAGEN.ID,FRAGE,STMP_FRAGE FROM FRAGEN
	left join BERATER
	on FRAGEN.FK_ID_BERATER = BERATER.ID
	WHERE BERATER.ID = @beraterID and FRAGEN.ANTWORT IS NULL
)
GO

CREATE PROCEDURE give_answer @frage_id INT, @answer VARCHAR(300)
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

	BEGIN TRY
		IF (SELECT COUNT(*) FROM FRAGEN WHERE FRAGEN.ID = @frage_id) != 1
			THROW 60000, 'frage ID invalid', 1
		IF LEN(@answer) > 300
			THROW 60000, 'antwort zu lange', 1
		IF LEN(@answer) = 0
			THROW 60000, 'keine antwort angegeben', 1

		UPDATE FRAGEN SET FRAGEN.ANTWORT = @answer, FRAGEN.STMP_ANTWORT = SYSDATETIME()
		WHERE FRAGEN.ID = @frage_id
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION	
	END CATCH
GO

USE VersicherungsDB
GO

DROP INDEX IF EXISTS BESTELLUNGEN.index_bestellungen_users
GO

CREATE NONCLUSTERED INDEX index_bestellungen_users
ON dbo.BESTELLUNGEN (FK_ID_USERS)

USE VersicherungsDB
Go

IF EXISTS (select * from sys.triggers where name = 'safety_trigger_table')
BEGIN
	DROP TRIGGER safety_trigger_table ON DATABASE
	PRINT('SAFETY TRIGGER #TABLE DELETED')
END
GO 
IF EXISTS (select * from sys.server_triggers where name = 'safety_trigger_db')
BEGIN
DROP TRIGGER safety_trigger_db ON ALL SERVER
	PRINT('SAFETY TRIGGER #DATABASE DELETED')
END
GO 


CREATE TRIGGER safety_trigger_table
ON DATABASE
FOR DROP_TABLE, ALTER_TABLE
AS
	RAISERROR ('You must disable Trigger "safety_trigger_table" to drop or alter tables!',10, 1)
	ROLLBACK
GO
PRINT('SAFETY TRIGGER #TABLE CREATED')
GO

CREATE TRIGGER safety_trigger_db
ON ALL SERVER
FOR DROP_DATABASE
AS
	RAISERROR ('You must disable Trigger "safety_trigger_table" to drop databases!',10, 1)
	ROLLBACK
GO
PRINT('SAFETY TRIGGER #DATABASE CREATED')
GO

USE VersicherungsDB
GO

DROP PROCEDURE IF EXISTS create_berater
GO
DROP FUNCTION IF EXISTS func_berater_name_by_anbieter_id
GO
DROP INDEX IF EXISTS BERATER.index_berater_anbieter_id
GO

CREATE PROCEDURE create_berater @user_name VARCHAR(30), @anbieter_name VARCHAR(30)
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
		
	BEGIN TRY
		DECLARE @tmp_user_id INT = (SELECT ID FROM view_users_id_name WHERE NAME = @user_name)
		IF @tmp_user_id = NULL
			throw 60000, 'username not existing', 1
		DECLARE @tmp_anb_id INT = (SELECT ID FROM ANBIETER WHERE NAME = @anbieter_name)
		IF @tmp_anb_id = NULL
			throw 60000, 'anbieter not existing', 1

		UPDATE USERS SET IS_BERATER = 1
		WHERE USERS.ID = @tmp_user_id
		
		INSERT INTO BERATER (FK_ID_USERS,FK_ID_ANB)
		VALUES (@tmp_user_id,@tmp_anb_id)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION
	END CATCH
GO

CREATE NONCLUSTERED INDEX index_berater_anbieter_id ON dbo.BERATER(FK_ID_ANB)
GO

CREATE FUNCTION dbo.func_berater_name_by_anbieter_id (@anbieter_id INT)
RETURNS TABLE
AS
	RETURN(SELECT USERS.NAME
	FROM USERS INNER JOIN BERATER
	ON USERS.ID = BERATER.FK_ID_USERS
	WHERE BERATER.FK_ID_ANB = @anbieter_id)
GO

USE VersicherungsDB
GO

DROP PROCEDURE IF EXISTS create_user
GO
DROP PROCEDURE IF EXISTS update_user
GO
DROP PROCEDURE IF EXISTS check_user_login
GO
DROP VIEW IF EXISTS view_users_id_name
GO

CREATE PROCEDURE create_user @user_name VARCHAR(30), @password VARCHAR(30),@birthday DATE, @wohnort VARCHAR(50), @is_admin BIT, @is_berater BIT
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

	BEGIN TRY
		IF @user_name = '' or @password='' or @birthday = '1900-01-01' or @birthday = NULL or @wohnort='' or @is_admin = NULL or @is_berater = NULL
			THROW 60000, 'one of the given variables is null or empty', 1

		IF @password LIKE '%[^a-zA-Z0-9]%'
			THROW 60000, 'only letters and numbers allowed in a password', 1
		IF LEN(@password) < 1 or LEN(@password) > 30 
			THROW 60000, 'minimum 1, max 30 characters in pw allowed', 1

		IF LEN(@wohnort) < 1 --(zum testen)
			THROW 60000, 'place of residence not possible', 1

		DECLARE @tmp_name INT = (SELECT count(*) FROM USERS WHERE NAME = @user_name)
		IF @tmp_name <> 0
			THROW 60000, 'username already exists', 1

		INSERT INTO USERS (NAME,PASSWORDHASH,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER)
		VALUES (@user_name,HASHBYTES('SHA2_512',@password),@birthday,@wohnort,@is_admin,@is_berater)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION
	END CATCH
GO


CREATE PROCEDURE update_user @user_name VARCHAR(30), @password VARCHAR(30),@birthday DATE, @wohnort VARCHAR(50), @is_admin BIT, @is_berater BIT
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

	BEGIN TRY
		IF @user_name = '' or @password='' or @birthday = '1900-01-01' or @birthday = NULL or @wohnort='' or @is_admin = NULL or @is_berater = NULL
			THROW 60000, 'one of the given variables is null or empty', 1

		IF @password LIKE '%[^a-zA-Z0-9]%'
			THROW 60000, 'only letters and numbers allowed in a password', 1
		IF LEN(@password) < 1 or LEN(@password) > 30 
			THROW 60000, 'minimum 1, max 30 characters in password allowed', 1

		IF LEN(@wohnort) < 1 --(zum testen)
			THROW 60000, 'place of residence not possible', 1

		DECLARE @tmp int = (SELECT COUNT(*) FROM USERS WHERE NAME = @user_name)
		IF @tmp <> 1
			THROW 60000, 'user does not exist', 1

		UPDATE USERS 
		SET 
		NAME=@user_name,PASSWORDHASH=HASHBYTES('SHA2_512',@password),GEBURTSTAG=@birthday,WOHNORT=@wohnort,IS_ADMIN=@is_admin,IS_BERATER=@is_berater
		WHERE NAME = @user_name

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION
	END CATCH
GO

CREATE PROCEDURE check_user_login @user_name VARCHAR(30), @password VARCHAR(30)
AS
	BEGIN
		SET NOCOUNT ON
		BEGIN TRANSACTION
		SET TRANSACTION ISOLATION LEVEL READ COMMITTED

		BEGIN TRY
			IF LEN(@user_name) > 30 OR LEN(@user_name) < 1
				THROW 60000, 'username must have at least 1 letter, max 30 letters', 1
			IF @password LIKE '%[^a-zA-Z0-9]%'
				THROW 60000, 'only letters and numbers allowed in a password', 1
			IF LEN(@password) < 1 or LEN(@password) > 30 
				THROW 60000, 'minimum 1, max 30 characters in password allowed', 1
			-- 0 failure, 1 user, 2 adviser, 3 admin
			--SELECT 
			--	CASE 
			--		WHEN EXISTS(SELECT NULL FROM USERS WHERE NAME=@user_name AND PASSWORDHASH=HASHBYTES('SHA2_512',@password) AND IS_ADMIN=1)
			--			THEN 3
			--		WHEN EXISTS(SELECT NULL FROM USERS WHERE NAME=@user_name AND PASSWORDHASH=HASHBYTES('SHA2_512',@password) AND IS_BERATER=1)
			--			THEN 2
			--		WHEN EXISTS(SELECT NULL FROM USERS WHERE NAME=@user_name AND PASSWORDHASH=HASHBYTES('SHA2_512',@password))
			--			THEN 1
			--		ELSE 0

			SELECT ID, NAME, GEBURTSTAG, WOHNORT, IS_BERATER, IS_ADMIN
			FROM USERS
			WHERE NAME = @user_name AND PASSWORDHASH=HASHBYTES('SHA2_512',@password)
			COMMIT TRANSACTION
		END TRY
		BEGIN CATCH
			PRINT ERROR_MESSAGE()
			ROLLBACK TRANSACTION
		END CATCH
	END
GO

CREATE VIEW view_users_id_name
AS
	SELECT USERS.ID, USERS.NAME
	FROM USERS
GO

USE VersicherungsDB
Go

--FOR TESTING PURPOSE: HARDCODED VIEWs zur Anzeige der Bestellungen nach Anbietern

DROP VIEW IF EXISTS view_show_best_generali
GO
DROP VIEW IF EXISTS view_show_best_uniqa
GO
DROP VIEW IF EXISTS view_show_best_wr_staedtische
GO
DROP VIEW IF EXISTS view_show_best_allianz
GO


CREATE VIEW view_show_best_generali
AS
	SELECT BESTELLUNGEN.ID,BESTELLUNGEN.FK_ID_USERS,BESTELLUNGEN.FK_ID_PRODUKTE_ANBIETER,BESTELLUNGEN.TIMESTAMP FROM BESTELLUNGEN	-- Holen der Bestellungsdaten von Generali Produkten
	INNER JOIN	
		(Select PRODUKTE_ANBIETER.ID as prod_anb_id FROM ANBIETER	--Holen der IDs der Generali Produkte
		LEFT JOIN PRODUKTE_ANBIETER
		ON ANBIETER.ID = PRODUKTE_ANBIETER.FK_ID_ANBIETER
		WHERE ANBIETER.NAME LIKE 'Generali AG') tmp
	ON BESTELLUNGEN.FK_ID_PRODUKTE_ANBIETER = tmp.prod_anb_id
GO

CREATE VIEW view_show_best_uniqa
AS
	SELECT BESTELLUNGEN.ID,BESTELLUNGEN.FK_ID_USERS,BESTELLUNGEN.FK_ID_PRODUKTE_ANBIETER,BESTELLUNGEN.TIMESTAMP FROM BESTELLUNGEN
	INNER JOIN 
		(Select PRODUKTE_ANBIETER.ID as prod_anb_id FROM ANBIETER
		LEFT JOIN PRODUKTE_ANBIETER
		ON ANBIETER.ID = PRODUKTE_ANBIETER.FK_ID_ANBIETER
		WHERE ANBIETER.NAME LIKE 'UNIQA AG') tmp
	ON BESTELLUNGEN.FK_ID_PRODUKTE_ANBIETER = tmp.prod_anb_id
GO

CREATE VIEW view_show_best_wr_staedtische
AS
	SELECT BESTELLUNGEN.ID,BESTELLUNGEN.FK_ID_USERS,BESTELLUNGEN.FK_ID_PRODUKTE_ANBIETER,BESTELLUNGEN.TIMESTAMP FROM BESTELLUNGEN
	INNER JOIN 
		(Select PRODUKTE_ANBIETER.ID as prod_anb_id FROM ANBIETER
		LEFT JOIN PRODUKTE_ANBIETER
		ON ANBIETER.ID = PRODUKTE_ANBIETER.FK_ID_ANBIETER
		WHERE ANBIETER.NAME LIKE 'WIENER ST�DTISCHE AG') tmp
	ON BESTELLUNGEN.FK_ID_PRODUKTE_ANBIETER = tmp.prod_anb_id
GO

CREATE VIEW view_show_best_allianz
AS
	SELECT BESTELLUNGEN.ID,BESTELLUNGEN.FK_ID_USERS,BESTELLUNGEN.FK_ID_PRODUKTE_ANBIETER,BESTELLUNGEN.TIMESTAMP FROM BESTELLUNGEN
	INNER JOIN 
		(Select PRODUKTE_ANBIETER.ID as prod_anb_id FROM ANBIETER
		LEFT JOIN PRODUKTE_ANBIETER
		ON ANBIETER.ID = PRODUKTE_ANBIETER.FK_ID_ANBIETER
		WHERE ANBIETER.NAME LIKE 'Allianz AG') tmp
	ON BESTELLUNGEN.FK_ID_PRODUKTE_ANBIETER = tmp.prod_anb_id
GO

USE VersicherungsDB
GO

DROP PROCEDURE IF EXISTS list_products_by_category
GO

CREATE PROCEDURE list_products_by_category @category_id INT
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	BEGIN TRY

		IF (SELECT COUNT(*) FROM PRODUKT_KATEGORIE WHERE PRODUKT_KATEGORIE.ID = @category_id) != 1
			THROW 60000, 'invalid category id', 1

		SELECT	prods.NAME as category, BESCHREIBUNG as description,
				PREIS as price, LAUFZEIT as duration, anb.NAME as vendor_name, ADRESSE as address
				FROM PRODUKTE AS prods
					FULL OUTER JOIN PRODUKTE_ANBIETER AS prod_anb
					ON prods.ID = prod_anb.FK_ID_PRODUKTE
					FULL OUTER JOIN ANBIETER AS anb
					ON anb.ID = prod_anb.FK_ID_ANBIETER
				WHERE prods.FK_ID_PRODUKT_KATEGORIE = @category_id

		COMMIT TRANSACTION

	END TRY
	BEGIN CATCH

		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION

	END CATCH
GO

CREATE PROCEDURE select_providerId_by_name @provider VARCHAR(30)
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

	BEGIN TRY
		IF LEN(@provider) > 30 OR LEN(@provider) < 1
				THROW 60000, 'provider must have at least 1 letter, max 30 letters', 1

		SELECT ID FROM ANBIETER
		WHERE @provider = NAME

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION
	END CATCH
GO

USE VersicherungsDB
GO

DROP PROCEDURE IF EXISTS list_all_categories
GO

CREATE PROCEDURE list_all_categories
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED

	SELECT * FROM PRODUKT_KATEGORIE

	COMMIT TRANSACTION
GO

USE VersicherungsDB
GO

DROP PROCEDURE IF EXISTS add_rating_for_vendor
GO
DROP PROCEDURE IF EXISTS add_rating_for_vendor_product
GO
DROP PROCEDURE IF EXISTS add_rating_for_advicer
GO

CREATE PROCEDURE add_rating_for_vendor_product @user_id INT, @vendor_product_id INT, @stars INT
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

	BEGIN TRY
		IF @stars < 1 OR @stars > 5
			THROW 60000, 'stars must be between 1 and 5', 1

		IF (SELECT COUNT(*) FROM USERS WHERE USERS.ID = @user_id) != 1
			THROW 60000, 'invalid user id', 1

		IF (SELECT COUNT(*) FROM PRODUKTE_ANBIETER WHERE PRODUKTE_ANBIETER.ID = @vendor_product_id) != 1
			THROW 60000, 'invalid vendor product id', 1

		INSERT INTO BEWERTUNG_ANBIETER_PROD(FK_ID_USERS, FK_ID_PRODUKTE_ANBIETER, STERNE)
		VALUES (@user_id, @vendor_product_id, @stars)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION
	END CATCH
GO

CREATE PROCEDURE add_rating_for_advicer @user_id INT, @advicer_id INT, @stars INT
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

	BEGIN TRY
		IF @stars < 1 OR @stars > 5
			THROW 60000, 'stars must be between 1 and 5', 1

		IF (SELECT COUNT(*) FROM USERS WHERE USERS.ID = @user_id) != 1
			THROW 60000, 'invalid user id', 1

		IF (SELECT COUNT(*) FROM BERATER WHERE BERATER.ID = @advicer_id) != 1
			THROW 60000, 'invalid advicer id', 1

		INSERT INTO BEWERTUNG_BERATER(FK_ID_USERS, FK_ID_BERATER, STERNE)
		VALUES (@user_id, @advicer_id, @stars)

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION
	END CATCH
GO

CREATE PROCEDURE add_rating_for_vendor @user_id INT, @vendor_id INT, @stars INT
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

	BEGIN TRY

		IF @stars < 1 OR @stars > 5
			THROW 60000, 'stars must be between 1 and 5', 1

		IF (SELECT COUNT(*) FROM USERS WHERE USERS.ID = @user_id) != 1
			THROW 60000, 'invalid user id', 1

		IF (SELECT COUNT(*) FROM ANBIETER WHERE ANBIETER.ID = @vendor_id) != 1
			THROW 60000, 'invalid vendor id', 1

		INSERT INTO BEWERTUNG_ANBIETER (FK_ID_USERS, FK_ID_ANBIETER, STERNE)
		VALUES (@user_id, @vendor_id, @stars)

		COMMIT TRANSACTION

	END TRY
	BEGIN CATCH

		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION

	END CATCH
GO

use VersicherungsDB
go

DROP VIEW IF EXISTS view_list_user
GO

DROP VIEW IF EXISTS view_list_consultant
GO

DROP VIEW IF EXISTS view_list_admin
GO

CREATE VIEW view_list_user
AS
	SELECT * FROM USERS
	WHERE
		IS_ADMIN = 0 AND IS_BERATER = 0
GO

CREATE VIEW view_list_consultant
AS
	SELECT * FROM USERS
	WHERE
		IS_BERATER = 1
GO

CREATE VIEW view_list_admin
AS
	SELECT * FROM USERS
	WHERE
		IS_ADMIN = 1
GO

---Forward Only Cursor
USE VersicherungsDB
GO

DECLARE @BESTELLUNGENID INT
DECLARE @getBESTELLUNGENID CURSOR

SET @getBESTELLUNGENID  = CURSOR FORWARD_ONLY FOR 


SELECT BESTELLUNGEN.ID
FROM BESTELLUNGEN
INNER JOIN USERS 
ON USERS.ID = BESTELLUNGEN.FK_ID_USERS
WHERE TIMESTAMP > '01.12.2018';

OPEN @getBESTELLUNGENID 
FETCH NEXT
FROM @getBESTELLUNGENID INTO @BESTELLUNGENID
WHILE @@FETCH_STATUS = 0

BEGIN
PRINT @BESTELLUNGENID
FETCH NEXT
FROM @getBESTELLUNGENID INTO @BESTELLUNGENID
END

CLOSE @getBESTELLUNGENID 
DEALLOCATE @getBESTELLUNGENID

-------------------------------------------------
USE VersicherungsDB
GO

DECLARE @PRODUKTEID INT
DECLARE @getPRODUKTEID CURSOR

SET @getPRODUKTEID = CURSOR FOR SELECT ID FROM PRODUKTE


SELECT PRODUKTE.ID
FROM PRODUKTE
INNER JOIN PRODUKTE_ANBIETER 
ON PRODUKTE.ID = PRODUKTE_ANBIETER.FK_ID_PRODUKTE
WHERE PRODUKTE_ANBIETER.PREIS <= 100;

OPEN @getPRODUKTEID
FETCH NEXT
FROM @getPRODUKTEID INTO @PRODUKTEID
WHILE @@FETCH_STATUS = 0

BEGIN
PRINT @PRODUKTEID
FETCH NEXT
FROM @getPRODUKTEID INTO @PRODUKTEID
END

CLOSE @getPRODUKTEID
DEALLOCATE @getPRODUKTEID

USE VersicherungsDB

------------------------------------- USERS --------------------------------
-- CASUAL USERS
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Max Mustermann','15.01.1990','Beispielweg 1, 1234 Kleinstadt',0,0)
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Maria Berger','22.03.1999','Beispielweg 2, 1234 Kleinstadt',0,0)
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Wolfgang Burg','05.11.1985','Beispielweg 3, 1234 Kleinstadt',0,0)
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Anita Sch�ttel','20.06.2000','Beispielweg 4, 1234 Kleinstadt',0,0)
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Bernhard Zelt','2.07.1993','Meine Strasse 13, 4215 Unterstadt',0,0)
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Ingrid Hofbauer','30.08.1990','Meine Strasse 16, 1234 Unterstadt',0,0)
-- BERATER
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Mechmet Alichmet','11.09.1989','Meine Strasse 19, 1234 Unterstadt',0,1)
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Patrick Stein','11.09.1989','Forstweg 1, 1210 Wien',0,1)
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Denise Dworak','23.02.1991','Kellergasse 7, 1220 Wien',0,1)
-- ADMIN
INSERT INTO dbo.USERS (PASSWORDHASH,NAME,GEBURTSTAG,WOHNORT,IS_ADMIN,IS_BERATER) VALUES (HASHBYTES('SHA2_512','password'),'Ulrich Bauer','01.05.1990','Lange Strasse 99, 6789 Felddorf',1,0)


------------------------------------- ANBIETER --------------------------------
INSERT INTO dbo.ANBIETER (NAME,ADRESSE) VALUES ('Generali AG','Landskrongasse 1-3, 1010 Wien')
INSERT INTO dbo.ANBIETER (NAME,ADRESSE) VALUES ('UNIQA AG','Untere Donaustra�e 21, 1029 Wien')
INSERT INTO dbo.ANBIETER (NAME,ADRESSE) VALUES ('WIENER ST�DTISCHE AG','Schottenring 30, 1011 Wien')
INSERT INTO dbo.ANBIETER (NAME,ADRESSE) VALUES ('Allianz AG','Hietzinger Kai 101-105, 1130 Wien')


------------------------------------- PRODUKT_KATEGORIE --------------------------------
INSERT INTO dbo.PRODUKT_KATEGORIE (NAME) VALUES ('KFZ-Versicherungen')
INSERT INTO dbo.PRODUKT_KATEGORIE (NAME) VALUES ('Unfall- und Krankenversicherungen')
INSERT INTO dbo.PRODUKT_KATEGORIE (NAME) VALUES ('Haushaltsversicherungen')


------------------------------------- PRODUKTE --------------------------------
INSERT INTO dbo.PRODUKTE (FK_ID_PRODUKT_KATEGORIE,NAME,BESCHREIBUNG) VALUES (1,'KFZ-Haftplicht','Haftpflichtversicherung f�r Ihr KFZ!')
INSERT INTO dbo.PRODUKTE (FK_ID_PRODUKT_KATEGORIE,NAME,BESCHREIBUNG) VALUES (1,'KFZ-Vollkasko','Vollkaskoversicherung f�r Ihr KFZ!')
INSERT INTO dbo.PRODUKTE (FK_ID_PRODUKT_KATEGORIE,NAME,BESCHREIBUNG) VALUES (2,'Unfallversicherung','Wenn Sie ins Krankenhaus kommen, sind Sie nicht alleine!')
INSERT INTO dbo.PRODUKTE (FK_ID_PRODUKT_KATEGORIE,NAME,BESCHREIBUNG) VALUES (2,'Krankenversicherung','Sie m�ssen zum Arzt? Wir �bernehmen die Kosten!')
INSERT INTO dbo.PRODUKTE (FK_ID_PRODUKT_KATEGORIE,NAME,BESCHREIBUNG) VALUES (3,'Haushaltsversicherung Basic','Sch�den am Haus? Wir �bernehmen das!')
INSERT INTO dbo.PRODUKTE (FK_ID_PRODUKT_KATEGORIE,NAME,BESCHREIBUNG) VALUES (3,'Haushaltsversicherung Wasser','Versicherungszusatz! Leitung geplatz? Monteur ist schon unterwegs!')


------------------------------------- BERATER --------------------------------
INSERT INTO dbo.BERATER (FK_ID_USERS,FK_ID_ANB) 
VALUES (
	(Select ID FROM dbo.USERS 
	WHERE NAME = 'Patrick Stein'),
	(SELECT ID FROM dbo.ANBIETER
	WHERE NAME = 'Generali AG')
)	--PATRICK STEIN -> GENERALI
INSERT INTO dbo.BERATER (FK_ID_USERS,FK_ID_ANB) 
VALUES (
	(Select ID FROM USERS 
	WHERE NAME = 'Denise Dworak'),
	(SELECT ID FROM ANBIETER
	WHERE NAME = 'UNIQA AG')
)	--DENISE DWORAK -> UNIQA
INSERT INTO dbo.BERATER (FK_ID_USERS,FK_ID_ANB) 
VALUES (
	(Select ID FROM USERS 
	WHERE NAME = 'Mechmet Alichmet'),
	(SELECT ID FROM ANBIETER
	WHERE NAME = 'Allianz AG')
)	--DENISE DWORAK -> Allianz


------------------------------------- PRODUKTE_ANBIETER --------------------------------
--GENERALI
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (1,1,89.99,12) --Haftpfl.
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (1,2,199.99,24)--Vollkasko
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (1,3,15.00,12)--Unfallvers.
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (1,4,31.50,36)--Krankenvers.
--UNIQA
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (2,3,10.50,12)	--Unfallvers.
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (2,4,27.50,24)	--Krankenvers.
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (2,5,29.90,24)	--Haushalt Basic
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (2,6,9.99,12)	--Haushalt Wasser
--Wr. St�dtische
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (3,1,79.99,12) --Haftpfl.
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (3,2,210.00,12)--Vollkasko
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (3,5,20.00,36)	--Haushalt Basic
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (3,6,18.00,36)	--Haushalt Wasser
--ALLIANZ
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (4,3,19.90,6)--Unfallvers.
INSERT INTO dbo.PRODUKTE_ANBIETER (FK_ID_ANBIETER,FK_ID_PRODUKTE,PREIS,LAUFZEIT) VALUES (4,4,29.90,6)--Krankenvers.


------------------------------------- BEWERTUNG_ANBIETER --------------------------------
INSERT INTO BEWERTUNG_ANBIETER (FK_ID_USERS,FK_ID_ANBIETER,STERNE) VALUES (1,1,3)
INSERT INTO BEWERTUNG_ANBIETER (FK_ID_USERS,FK_ID_ANBIETER,STERNE) VALUES (4,2,5)
INSERT INTO BEWERTUNG_ANBIETER (FK_ID_USERS,FK_ID_ANBIETER,STERNE) VALUES (2,2,2)
INSERT INTO BEWERTUNG_ANBIETER (FK_ID_USERS,FK_ID_ANBIETER,STERNE) VALUES (5,3,4)
INSERT INTO BEWERTUNG_ANBIETER (FK_ID_USERS,FK_ID_ANBIETER,STERNE) VALUES (6,3,5)


------------------------------------- BEWERTUNG_ANBIETER_PROD --------------------------------
INSERT INTO dbo.BEWERTUNG_ANBIETER_PROD (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER,STERNE) VALUES (1,3,4)
INSERT INTO dbo.BEWERTUNG_ANBIETER_PROD (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER,STERNE) VALUES (1,2,2)
INSERT INTO dbo.BEWERTUNG_ANBIETER_PROD (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER,STERNE) VALUES (2,5,2)
INSERT INTO dbo.BEWERTUNG_ANBIETER_PROD (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER,STERNE) VALUES (3,9,2)
INSERT INTO dbo.BEWERTUNG_ANBIETER_PROD (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER,STERNE) VALUES (4,7,5)
INSERT INTO dbo.BEWERTUNG_ANBIETER_PROD (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER,STERNE) VALUES (5,7,1)
INSERT INTO dbo.BEWERTUNG_ANBIETER_PROD (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER,STERNE) VALUES (6,11,3)
INSERT INTO dbo.BEWERTUNG_ANBIETER_PROD (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER,STERNE) VALUES (7,14,4)


------------------------------------- BEWERTUNG_BERATER --------------------------------
INSERT INTO dbo.BEWERTUNG_BERATER (FK_ID_USERS,FK_ID_BERATER,STERNE) VALUES (1,1,3)
INSERT INTO dbo.BEWERTUNG_BERATER (FK_ID_USERS,FK_ID_BERATER,STERNE) VALUES (5,1,4)
INSERT INTO dbo.BEWERTUNG_BERATER (FK_ID_USERS,FK_ID_BERATER,STERNE) VALUES (3,2,4)
INSERT INTO dbo.BEWERTUNG_BERATER (FK_ID_USERS,FK_ID_BERATER,STERNE) VALUES (7,2,5)
INSERT INTO dbo.BEWERTUNG_BERATER (FK_ID_USERS,FK_ID_BERATER,STERNE) VALUES (2,2,2)


------------------------------------- BESTELLUNGEN --------------------------------
INSERT INTO dbo.BESTELLUNGEN (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER) VALUES (1,3)
INSERT INTO dbo.BESTELLUNGEN (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER) VALUES (2,5)
INSERT INTO dbo.BESTELLUNGEN (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER) VALUES (3,9)
INSERT INTO dbo.BESTELLUNGEN (FK_ID_USERS,FK_ID_PRODUKTE_ANBIETER) VALUES (7,14)


------------------------------------- FRAGEN --------------------------------
INSERT INTO dbo.FRAGEN (FK_ID_USERS,FK_ID_BERATER,FRAGE,ANTWORT,STMP_ANTWORT) 
	VALUES (1,NULL,'TESTFRAGE KUNDE 1','TEST-ANTWORT BERATER 1',SYSDATETIME())
INSERT INTO dbo.FRAGEN (FK_ID_USERS,FK_ID_BERATER,FRAGE) 
	VALUES (5,NULL,'TESTFRAGE KUNDE 5')
INSERT INTO dbo.FRAGEN (FK_ID_USERS,FK_ID_BERATER,FRAGE,ANTWORT,STMP_ANTWORT) 
	VALUES (7,NULL,'TESTFRAGE KUNDE 7','TEST-ANTWORT BERATER 2','14.12.2018 21:05:14.123')
INSERT INTO dbo.FRAGEN (FK_ID_USERS,FK_ID_BERATER,FRAGE) 
	VALUES (3,NULL,'TESTFRAGE KUNDE 3')
INSERT INTO dbo.FRAGEN (FK_ID_USERS,FK_ID_BERATER,FRAGE) 
	VALUES (2,NULL,'TESTFRAGE KUNDE 2')


------------------------------------- BERATER_FRAGEN --------------------------------
--INSERT INTO dbo.BERATER_FRAGEN (FK_ID_BERATER,FK_ID_FRAGE) VALUES (1,1)
--INSERT INTO dbo.BERATER_FRAGEN (FK_ID_BERATER,FK_ID_FRAGE) VALUES (2,3)
