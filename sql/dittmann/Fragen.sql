USE VersicherungsDB

DROP PROCEDURE IF EXISTS create_frage_user
GO
DROP FUNCTION IF EXISTS get_open_questions_by_berater_id	--VIEW nicht möglich, da Parameterübergabe notwendig
GO
DROP PROCEDURE IF EXISTS give_answer
GO
DROP TRIGGER IF EXISTS new_question_added
GO

CREATE PROCEDURE create_frage_user @fk_id_users INT, @frage VARCHAR(300)
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	BEGIN TRY
		IF (SELECT COUNT(*) FROM USERS WHERE USERS.ID = @fk_id_users) != 1
			THROW 60000, 'user id invalid', 1
		IF LEN(@frage) > 300
			THROW 60000, 'frage zu lange (max 300)' , 1
		INSERT INTO FRAGEN (FK_ID_USERS,FRAGE) VALUES (@fk_id_users,@frage)
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION
	END CATCH
GO

CREATE TRIGGER new_question_added ON FRAGEN --Zuweisung des Beraters zu einer neuen Frage per Trigger (Berater, mit den wenigsten Fragen)
AFTER INSERT
AS
	DECLARE @Ber INT
	DECLARE @frage_ID INT
	IF (SELECT COUNT(*) FROM FRAGEN) = 1	--Erste Frage
	BEGIN 
		SET @Ber =
			(SELECT TOP 1 BERATER.ID FROM BERATER)
		SET @frage_ID = 
			(SELECT COUNT(*) FROM FRAGEN)
		UPDATE FRAGEN SET FRAGEN.FK_ID_BERATER = @Ber WHERE FRAGEN.ID = @frage_ID
	END
	ELSE
	BEGIN
		SET @Ber =
			(SELECT TOP 1 BERATER.ID FROM BERATER LEFT JOIN 
				(SELECT BERATER.ID as BID, COUNT(FRAGEN.FK_ID_BERATER) as CNT FROM BERATER LEFT JOIN FRAGEN
					ON BERATER.ID = FRAGEN.FK_ID_BERATER
					GROUP BY BERATER.ID) INNERTABLE
				ON BERATER.ID = INNERTABLE.BID
				ORDER BY CNT ASC)
		SET @frage_ID = 
			(SELECT COUNT(*) FROM FRAGEN)

			UPDATE FRAGEN SET FRAGEN.FK_ID_BERATER = @Ber WHERE FRAGEN.ID = @frage_ID
	END
GO


CREATE FUNCTION get_open_questions_by_berater_id (@beraterID INT)
RETURNS TABLE
AS
RETURN
(
	SELECT FRAGEN.ID,FRAGE,STMP_FRAGE FROM FRAGEN
	left join BERATER
	on FRAGEN.FK_ID_BERATER = BERATER.ID
	WHERE BERATER.ID = @beraterID and FRAGEN.ANTWORT IS NULL
)
GO

CREATE PROCEDURE give_answer @frage_id INT, @answer VARCHAR(300)
AS
	BEGIN TRANSACTION
	SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

	BEGIN TRY
		IF (SELECT COUNT(*) FROM FRAGEN WHERE FRAGEN.ID = @frage_id) != 1
			THROW 60000, 'frage ID invalid', 1
		IF LEN(@answer) > 300
			THROW 60000, 'antwort zu lange', 1
		IF LEN(@answer) = 0
			THROW 60000, 'keine antwort angegeben', 1

		UPDATE FRAGEN SET FRAGEN.ANTWORT = @answer, FRAGEN.STMP_ANTWORT = SYSDATETIME()
		WHERE FRAGEN.ID = @frage_id
		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		PRINT ERROR_MESSAGE()
		ROLLBACK TRANSACTION	
	END CATCH
GO